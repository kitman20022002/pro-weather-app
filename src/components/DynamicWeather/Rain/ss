import React from "react";

import './DynamicWeather.css';
import rainDrop from "./Rain/rainDrop";
import * as  config from './config';



class DynamicWeather extends React.Component {
    componentDidMount() {
        config.canvas = this.refs.canvas;
        config.context = config.canvas.getContext("2d");


        let cityEl = '';
        let tempEl = '';


        let updateConditions = function (event) {

        };

        let self= this;
        config.context.cityEl = 'Loading clouds...';
        this.preLoadImageAssets(function () {
            config.context.cityEl = 'Dunedin, New Zealand';
            config.context.tempEl = '3&deg;';
            self.setConditionReady();
        });
    }

    preLoadImageAssets = (callback) => {
        callback();
    };


    pause = () => {

    };

    setConditionReady = () => {
        // stop spawning
        this.pause();

        // clear flags
        config.spawnedClouds = false;

        // clear assets
        for (let i = 0, n = config.assets.length; i < n; i++) {
            config.assets.splice(i, 1);
            n--;
            i--;
        }

        // start spawning
        this.beginSpawning();
    };

    beginSpawning = () => {
        config.timers.rain = setInterval(function()
        {
            config.assets.push(new rainDrop());
        }, 60);


        this.animate();
    };

    animate = () => {
        // clear
        config.context.clearRect(0, 0, config.canvas.width, config.canvas.height);
        // draw each asset, if false, remove particle from assets
        for (let i = 0, n = config.assets.length; i < n; i++) {
            if (!config.assets[i].draw()) {
                config.assets.splice(i, 1);
                n--;
                i--;
            }
        }

        // continue
        config.animationId = window.requestAnimationFrame(this.animate);
    };

    render() {



        return (
            <canvas ref="canvas" width="600" height="350" id="canvas" className="canvas day"/>
        );
    }
}

export default DynamicWeather;
